from django.db import models
from django.utils.timezone import now
from db.vsolvmodels import VModels

# CMS MASTER
class ProjectType(VModels):
    code = models.CharField(max_length=16, null=True)
    name = models.CharField(max_length=128)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class DocumentType(VModels):
    code = models.CharField(max_length=16, null=True)
    name = models.CharField(max_length=128)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# ProjectIdentification
class ProjectIdentification(VModels):
    code = models.CharField(max_length=16, null=True)
    title = models.CharField(max_length=128)
    type = models.IntegerField(null=True)
    onbehalf_group = models.IntegerField(null=True)
    approval_status = models.SmallIntegerField(default=1)
    parallel_approval=models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    is_project = models.BooleanField(default=False)
    project_id = models.IntegerField(null=True)

class ProjectidentificationApprovalTran(VModels):
    project_identification = models.ForeignKey(ProjectIdentification, on_delete=models.CASCADE)
    tran_type = models.SmallIntegerField()
    to = models.IntegerField(default=-1)
    to_type = models.SmallIntegerField()
    tran_status = models.SmallIntegerField(default=1)
    order=models.IntegerField(default=-1)
    is_forward = models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# CMS
class Project(VModels):
    project_identification = models.ForeignKey(ProjectIdentification, on_delete=models.CASCADE, null=True)
    code = models.CharField(max_length=16,null=True)
    title = models.CharField(max_length=128)
    type=models.IntegerField(null=True)
    submission_start_date = models.DateField(null=True)
    submission_end_date = models.DateField(null=True)
    project_start_date = models.DateField(null=True)
    project_end_date = models.DateField(null=True)
    budget = models.FloatField(null=True)
    cat_id = models.IntegerField(null=True)
    subcat_id = models.IntegerField(null=True)
    estimate_currentspent = models.FloatField(null=True)
    estimate_save = models.FloatField(null=True)
    onbehalf_group = models.IntegerField(null=True)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True)
    approval_status = models.SmallIntegerField(default=1)
    parallel_approval = models.BooleanField(default=False)
    is_closed = models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    view_type = models.IntegerField(null=True)
    description = models.CharField(max_length=2048, null=True)
    commodity_id = models.IntegerField(null=True)
    subcommodity = models.CharField(max_length=128, null=True)
    rel_cat = models.IntegerField(null=True)
    criticality = models.IntegerField(null=True)
    vendor_type = models.IntegerField(null=True)

# project tran
class ProjectApprovalTran(VModels):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    tran_type = models.SmallIntegerField()
    to = models.IntegerField(default=-1)
    to_type = models.SmallIntegerField()
    tran_status = models.SmallIntegerField(default=1)
    order=models.IntegerField(default=-1)
    is_forward = models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# project , project identification comments
class ProjectTranComments(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    approver = models.IntegerField(default=-1)
    comments=models.CharField(null=True,max_length=512)
    approval_status=models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# Proposal
class ProposedContract(VModels):
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)
    code = models.CharField(max_length=16, null=True)
    name = models.CharField(max_length=128)
    submitted_date = models.DateField(null=True)
    budget = models.FloatField(null=True)
    proposer_code = models.CharField(null=True, max_length=16)
    is_vendor = models.BooleanField(default=False)
    approval_status = models.SmallIntegerField(default=1)
    parallel_approval=models.BooleanField(default=False)
    is_shortlisted=models.BooleanField(default=False)
    is_finalized=models.BooleanField(default=False)
    update_refid=models.IntegerField(null=True)  # refer cms update history table
    is_ref =models.BooleanField(default=False) # refer isupdated  active
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# *****
class ShortlistTranHistory(VModels):
    proposal_id = models.ForeignKey(ProposedContract, on_delete=models.SET_NULL, null=True)
    tran_status=models.SmallIntegerField(default=1)
    comments = models.CharField(max_length=400,null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class ProposedContractApprovalTran(VModels):
    proposed = models.ForeignKey(ProposedContract, on_delete=models.CASCADE)
    tran_type = models.SmallIntegerField()
    to = models.IntegerField(default=-1)
    to_type = models.SmallIntegerField()
    tran_status = models.SmallIntegerField(default=1)
    next_approver=models.IntegerField(default=-1)
    order=models.IntegerField(default=-1)
    is_forward = models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class ProposedContractTranComments(VModels):
    proposed = models.ForeignKey(ProposedContract, on_delete=models.CASCADE)
    approver = models.IntegerField(default=-1)
    comments=models.CharField(null=True,max_length=512)
    approval_status=models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)


class CMSDocuments(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    file_name = models.CharField(max_length=256)
    gen_file_name = models.CharField(max_length=512)
    file_id = models.CharField(max_length=64, null=True)
    type = models.IntegerField(default=-1)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSCovernote(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    note = models.TextField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class TransactionComments(VModels):
    ref_id = models.IntegerField(default=-1)
    ref_type = models.SmallIntegerField(default=-1)
    comment = models.TextField(null=True)
    type = models.SmallIntegerField(default=1)
    reply_id = models.IntegerField(null =True)
    q_type=models.IntegerField(null =True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    update_refid = models.IntegerField(null=True)  # refer cms update history table
    is_ref = models.BooleanField(default=False)  # refer isupdated  active

class CMSDocumentsHistory(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    file_name = models.CharField(max_length=256)
    gen_file_name = models.CharField(max_length=512)
    file_id = models.CharField(max_length=64, null=True)
    type = models.IntegerField(default=-1)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)

class ProjectHistory(VModels):
    history_id = models.IntegerField(null=True)
    code = models.CharField(max_length=16,null=True)
    title = models.CharField(max_length=128)
    type = models.IntegerField(null=True)
    submission_start_date = models.DateField(null=True)
    submission_end_date = models.DateField(null=True)
    project_start_date = models.DateField(null=True)
    project_end_date = models.DateField(null=True)
    budget = models.FloatField(null=True)
    cat_id = models.IntegerField(null=True)
    subcat_id = models.IntegerField(null=True)
    estimate_currentspent = models.FloatField(null=True)
    estimate_save = models.FloatField(null=True)
    onbehalf_group = models.IntegerField(null=True)
    parent_id = models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    view_type = models.IntegerField(null=True)
    description = models.CharField(max_length=2048, null=True)
    version = models.IntegerField(null=True)
    commodity_id = models.IntegerField(null=True)
    subcommodity = models.CharField(max_length=128, null=True)
    rel_cat = models.IntegerField(null=True)
    criticality = models.IntegerField(null=True)
    vendor_type = models.IntegerField(null=True)

class ProposedContractHistory(VModels):
    history_id =models.IntegerField(null=True)
    project_id = models.IntegerField(null=True)
    code = models.CharField(max_length=16,null=True)
    name = models.CharField(max_length=128)
    submitted_date = models.DateField(null=True)
    budget = models.FloatField(null=True)
    proposer_code = models.CharField(null=True,max_length=16)
    is_vendor = models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    version = models.IntegerField(null=True)

class CodeGenHistory(VModels):
    ref_table = models.SmallIntegerField()
    ref_code = models.CharField(null=True,max_length=16)
    last_id =models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    
class CMSNotepad(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    content = models.TextField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSCovernoteHistory(VModels):
    rel_id = models.IntegerField(default=-1)
    rel_type = models.IntegerField(default=-1)
    note=models.TextField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.SmallIntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSProjectInvitation(VModels):
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)
    email_id = models.CharField(null=True, max_length=64)
    v_code = models.CharField(null=True, max_length=16)
    v_name = models.CharField(null=True, max_length=64)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class QuestionnaireTimer(VModels):
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)
    question_type = models.IntegerField(null=True)
    order = models.SmallIntegerField(null=True)
    timer_on = models.BooleanField(default=False)
    tag_timer = models.SmallIntegerField(null=True)
    parallel_approval=models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

#  classify refer to project / proposal
class QuestionClassification(VModels):
    classify_id = models.IntegerField(null=True)
    classify_type = models.IntegerField(null=True)
    question_type = models.IntegerField(null=True)
    timer_on = models.BooleanField(default=False)
    tag_timer = models.SmallIntegerField(null=True)
    order = models.SmallIntegerField(null=True)
    approval_status = models.SmallIntegerField(null=True)
    parallel_approval=models.BooleanField(default=False)
    start_timer=models.DateTimeField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# reftype refer to supplier / group
class QuestionAnswers(VModels):
    classify= models.ForeignKey(QuestionClassification, on_delete=models.SET_NULL, null=True)
    question_id = models.IntegerField(null=True)
    question_type = models.IntegerField(null=True)
    answer = models.TextField(null=True)
    option_type = models.IntegerField(null=True)
    option_id = models.IntegerField(null=True)
    ref_type=models.IntegerField(null=True)
    ref_id=models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    update_refid = models.IntegerField(null=True)  # refer cms update history table
    is_ref = models.BooleanField(default=False) # refer cms update history table


class CMSQuestionType(VModels):
    question_type_id = models.IntegerField(null=True)
    vendor_id = models.IntegerField(null=True)
    cat_id = models.IntegerField(null=True)
    subcat_id = models.IntegerField(null=True)
    group_id = models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSQuestionTypeMapping(VModels):
    question_id = models.IntegerField(null=True)
    mapping = models.ForeignKey(CMSQuestionType, on_delete=models.SET_NULL, null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSQuestionAnswer(VModels):
    answer_id = models.IntegerField(null=True)
    type_id = models.IntegerField(null=True)
    subtype_id = models.IntegerField(null=True)
    reftype_id = models.IntegerField(null=True)
    ref_id = models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class AnswerMapping(VModels):
    answer = models.ForeignKey(QuestionAnswers, on_delete=models.SET_NULL, null=True)
    ref_type = models.IntegerField(null=True)
    ref_id = models.IntegerField(null=True)
    comments=models.CharField(max_length=500,null=True)
    score= models.IntegerField(null=True)
    red_flag=models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# project - question type mapping
class QuestionProjectMapping(VModels):
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)
    type_id=models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True, blank=True)
    updated_date = models.DateTimeField(null=True, blank=True)

# Project related question
class ProjectQuestions(VModels):
    q_type = models.IntegerField()
    project = models.ForeignKey(Project, on_delete=models.SET_NULL, null=True)
    text = models.TextField(null=True, blank=True)
    order = models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

# Project related  proposal answer
class ProjectProposalAnswers(VModels):
    question = models.ForeignKey(ProjectQuestions, on_delete=models.SET_NULL, null=True)
    answer = models.TextField(null=True)
    ref_type =models.IntegerField(null=True)
    ref_id =models.IntegerField(null=True)
    val_type=models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMS_MailScheduler(VModels):
    rel_id = models.IntegerField(null=True)
    rel_type = models.IntegerField(null=True)
    tran_type = models.IntegerField(null=True)
    to_mail=models.IntegerField()
    is_user=models.IntegerField(null=True)
    to_type=models.IntegerField()
    created_date = models.DateTimeField(default=now)
    created_by = models.IntegerField()
    is_send = models.BooleanField(default=False)
    mail_type = models.CharField(max_length=64, null=True, blank=True)


class CMSActivity(VModels):
    proposal_id=models.IntegerField(null=True)
    supplier_code=models.CharField(max_length=128)
    type = models.CharField(max_length=128)
    name = models.CharField(max_length=128)
    description = models.CharField(max_length=128, null=True)
    start_date = models.DateField(null=True)
    end_date = models.DateField(null=True)
    contract_spend = models.IntegerField(null=True)
    rm = models.IntegerField(null=True)
    fidelity = models.BooleanField()
    bidding = models.BooleanField()
    # activity details
    raisor = models.IntegerField(null=True)
    approver = models.IntegerField(null=True)
    # catalog
    productname = models.IntegerField(null=True)
    category = models.IntegerField(null=True)
    subcategory = models.IntegerField(null=True)
    is_created=models.BooleanField(default=False)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True, blank=True)
    updated_date = models.DateTimeField(null=True, blank=True)

# legal clauses

class LegalClauses(VModels):
    name=models.CharField(max_length=120,null=True)
    clauses=models.TextField()
    description = models.CharField(max_length=200, null=True)
    type=models.SmallIntegerField(null=True)
    approval_status=models.SmallIntegerField(null=True)
    approval_by=models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)
    parent_id = models.IntegerField(null=True)

class ProposalLegalclausesMapping(VModels):
    clauses =models.ForeignKey(LegalClauses, on_delete=models.CASCADE)
    proposal = models.ForeignKey(ProposedContract, on_delete=models.SET_NULL,null=True)
    order=models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class ProposalAgreement(VModels):
    proposal = models.ForeignKey(ProposedContract, on_delete=models.SET_NULL,null=True)
    agreement= models.TextField()
    version =models.IntegerField(null=True)
    start_date=models.DateField(null=True)
    end_date=models.DateField(null=True)
    type = models.SmallIntegerField(null=True)
    is_issued=models.BooleanField(default=False)
    is_accepted=models.BooleanField(default=False)
    is_vow_submit=models.BooleanField(default=False)   # true -> vow , false -> cms
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSVersionHistory(VModels):
    ref_id = models.IntegerField(null=True)
    ref_type = models.IntegerField(null=True)
    version = models.IntegerField(null=True)
    data = models.TextField()
    data_type = models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSUpdateHistory(VModels):
    ref_id = models.IntegerField(null=True)
    ref_type = models.IntegerField(null=True) # refer update history util
    data = models.TextField()
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)


class AgreementType(VModels):
    code = models.CharField(max_length=16, null=True)
    name = models.CharField(max_length=128)
    type = models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class ProposalAgreementVersion(VModels):
    agreement = models.ForeignKey(ProposalAgreement, on_delete=models.SET_NULL,null=True)
    note= models.TextField()
    version=models.IntegerField(null=True)
    type = models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class Agreement_Superscript(VModels):
    agreementversion = models.ForeignKey(ProposalAgreementVersion, on_delete=models.SET_NULL,null=True)
    start_index = models.IntegerField(null=True)
    end_index = models.IntegerField(null=True)
    order=models.IntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class CMSGroupMapping(VModels):
    group_id=models.IntegerField()
    ref_id = models.IntegerField(null=True)
    ref_type = models.IntegerField(null=True)
    is_user = models.BooleanField(default=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)

class ProposerVendorMapping(VModels):
    vendor_code=models.CharField(max_length=16,null=True)
    proposer_code=models.CharField(max_length=16,null=True)
    is_user = models.BooleanField(default=True)
    status = models.SmallIntegerField(default=1)
    created_by = models.IntegerField(null=True)
    created_date = models.DateTimeField(default=now)

class QuestionaireTranComments(VModels):
    classify= models.ForeignKey(QuestionClassification, on_delete=models.SET_NULL, null=True)
    approver = models.IntegerField(default=-1)
    comments=models.CharField(null=True,max_length=512)
    approval_status=models.SmallIntegerField(null=True)
    status = models.SmallIntegerField(default=1)
    is_user = models.BooleanField(default=True)
    created_by = models.IntegerField()
    created_date = models.DateTimeField(default=now)
    updated_by = models.IntegerField(null=True)
    updated_date = models.DateTimeField(null=True)